const express = require("express");
const uuid = require("uuid");
const router = express.Router();
const database = require("../../Database");

// Route: Get All List Items
router.get("/", (req, res) => {
  res.json(database);
});

// Route: Get Single List Item
router.get("/:id", (req, res) => {
  // returns true or false if the ID is found in the database
  const target = database.some(item => item.id === req.params.id);

  // if an ID exists in the database
  if (target) {
    // return all list items that match the ID (req.param.id)
    res.json(database.filter(item => item.id === req.params.id));
  } else {
    // status 404 = bad request
    res.status(404).json({ msg: `No item with the id of ${req.params.id}` });
  }
});

// Route: Create a Single List Item
router.post("/", (req, res) => {
  const newItem = {
    // create a new JSON object
    id: uuid.v4(), // ID will be generated by DB
    parentID: req.body.parentID,
    age: req.body.age,
    todo: req.body.todo,
    name: req.body.name
  };

  // error out if all fields are not sent
  if (!newItem.parentID || !newItem.age || !newItem.todo || !newItem.name) {
    return res.status(400).json({ msg: `Please include all required field` });
  }

  // when using mongoDB use mongoose and database.save(newItem)
  database.push(newItem); // add the item to the database
  res.json(database);
});

// Route: Update Single List Item
router.put("/:id", (req, res) => {
  // returns true or false if the ID is found in the database
  const target = database.some(item => item.id === req.params.id);

  // if an ID exists in the database
  if (target) {
    const updItem = req.body; // reerence to the request's body

    /* when using a real database, this will be different */
    database.forEach(item => {
      // search the database
      if (item.id === req.params.id) {
        // if the ID matches one in the database, update the fields:
        item.parentID = updItem.parentID ? updItem.parentID : item.parentID;
        item.age = updItem.age ? updItem.age : item.age;
        item.todo = updItem.todo ? updItem.todo : item.todo;
        item.name = updItem.name ? updItem.name : item.name;

        res.json({ msg: "Item is updated", item });
      }
    });
  } else {
    // status 404 = bad request
    res.status(404).json({ msg: `No item with the id of ${req.params.id}` });
  }
});

router.delete("/:id", (req, res) => {
  // returns true or false if the ID is found in the database
  const target = database.some(item => item.id === req.params.id);

  // if an ID exists in the database
  if (target) {
    // return all list items without the ID (req.param.id)
    res.json({
      msg: "Member deleted",
      database: database.filter(item => item.id !== req.params.id)
    });
  } else {
    // status 404 = bad request
    res.status(404).json({ msg: `No item with the id of ${req.params.id}` });
  }
});

module.exports = router;
